
set -o

x log init yy

GIT_DOMAIN=${GIT_DOMAIN:-$(x websrc gitdomain)}

# git clone "git@${GIT_DOMAIN}:x-cmd/y0"

function prepare_gitb(){
    local modlist="$1"
    {
        if [ -n "$modlist" ]; then
            printf "%s\n" "$modlist" | sed 's/ /\n/g'
        else
            x yanfa vstream x0
        fi
    } | while read -r repo; do
        [ -n "$repo" ] || continue
        printf "%s\n" "git@${GIT_DOMAIN}:x-bash/${repo}.git"
    done | x gitb add
}

function handle_if_repo_empty(){
    local no="$1"
    yy:info "正在初始化${PWD}目录"
    git checkout -b main
    touch .gitignore
    git add .gitignore
    git commit -m ...
    x mkdirp mod
    x rmrf "x$no"
    [ -f LICENSE ] || {
        printf "%s\n" '本项目所有权限为李均豪(Li Junhao, l@x-cmd.com)所有，保留所有权利。
本项目仅由李均豪访问，如果你意外获得本仓库数据，请马上删除。' > LICENSE
    }
    [ -f X ] || {
        printf "%s\n" '. "${___X_CMD_ROOT_CODE:-"$___X_CMD_ROOT/v/$___X_CMD_VERSION"}/mod/xrc/latest"' > X
    }

}

function update_mod(){
    local mod="$1"
    local gibpath; gibpath="$(x gitb which "x-bash/${mod}")"
    yy:info "以subtree模式更新模块 $mod"
    yy:info "gitb路径 $gibpath"
    if [ -d "mod/$mod" ]; then
        git subtree pull  --prefix="mod/$mod" --squash "$gibpath" main
    else
        git subtree add   --prefix="mod/$mod" --squash "$gibpath" main
    fi
}

function update_part(){
    local modlist="$1"
    yy:info "更新部分模块 => modlist[$modlist]"
    local mod; printf "%s\n" "$modlist" | sed 's/ /\n/g' | sort | while read -r mod; do
        [ -n "$mod" ] || continue
        update_mod "$mod"
    done

    modlist=" ${modlist} "
    local l; local commit;
    while read -r l; do
        mod="${l#* }"
        mod="${mod%% *}"
        if [ "$modlist" = "${modlist#*" ${mod} "}" ]; then
            printf "%s\n" "$l" >> ../mod.index.txt
        else
            yy:info "update ${mod} ==> mod.index.yml"
            commit="$(cd "$(x gitb which "x-bash/${mod}")" || return; git log -n 1 main | awk 'NR==1{ print $2; }')"
            printf "%s %s main NULL\n" "$commit" "$mod" >> ../mod.index.txt
        fi
    done < .x-cmd/metadata/mod.index.txt
}

function update_all(){
    local no="$1"
    yy:info "更新所有模块 => x$no"

    local mod; local commit;
    x yanfa vstream "x$no" | sort | while read -r mod; do
        [ -n "$mod" ] || continue
        update_mod "$mod"
        # commit=$(git log -n 1 "mod/$mod" | awk '$0==""{ getline; a=substr($NF, 2, length($NF)-2); print a; }')
        commit="$(cd "$(x gitb which "x-bash/${mod}")" || return; git log -n 1 main | awk 'NR==1{ print $2; }')"
        printf "%s %s main NULL\n" "$commit" "$mod" >> ../mod.index.txt
    done
}

function work(){
    local no=$1
    [ -d "y${no}" ] || git clone "git@${GIT_DOMAIN}:x-cmd/y${no}.git" || return
    (
        cd "y${no}" || return
        handle_if_repo_empty "$no"

        x gitb which x-bash/x-cmd

        if [ -z "$INPUTS_UPDATE_MOD_LIST" ]; then
            update_all "$no"
        else
            update_part "$INPUTS_UPDATE_MOD_LIST"
        fi

        x rmrf mod.index.txt .x-cmd/metadata
        mkdir -p .x-cmd/metadata
        mv ../mod.index.txt .x-cmd/metadata/mod.index.txt
        git add .
        git commit -m ...
        git push "git@${GIT_DOMAIN}:x-cmd/y${no}.git" main
    )
}

function main(){
    prepare_gitb "$INPUTS_UPDATE_MOD_LIST"
    for i in "$@"; do
        work "$i" || exit 1
    done
}

[ -z "$INPUTS_VERSION_NUM" ] || eval "set -- $INPUTS_VERSION_NUM"

if [ $# -eq 0 ]; then
    set -- 0 1 6
fi

main "$@"
