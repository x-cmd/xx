
set -o

x log init yy

GIT_DOMAIN=${GIT_DOMAIN:-$(x websrc gitdomain)}

git clone "git@${GIT_DOMAIN}:x-cmd/y0"

function prepare_gitb(){
    x yanfa vstream x0 | while read -r repo; do
        printf "%s\n" "git@${GIT_DOMAIN}:x-bash/${repo}.git"
    done | x gitb add
}

function handle_if_repo_empty(){
    git checkout -b main
    touch .gitignore
    git add .gitignore
    git commit -m ...
    x mkdirp mod
}


function work(){
    local no=$1
    x git clone "git@${GIT_DOMAIN}:x-cmd/y${no}.git"
    (
        cd "y${no}"
        yy:info "正在${PWD}创建目录mod"

        handle_if_repo_empty

        x gitb which x-bash/x-cmd

        x yanfa vstream "x$no" | sort | while read -r mod; do
            (
                yy:info "以subtree模式更新模块 $mod"
                gibpath="$(x gitb which x-bash/${mod})"
                yy:info "gitb路径 $gibpath"
                if [ -d "mod/$mod" ]; then
                    git subtree pull  --prefix="mod/$mod" --squash "$gibpath" main
                else
                    git subtree add   --prefix="mod/$mod" --squash "$gibpath" main
                fi

                # commit=$(git log -n 1 "mod/$mod" | awk '$0==""{ getline; a=substr($NF, 2, length($NF)-2); print a; }')
                commit="$(cd "$gibpath"; git log -n 1 main | awk 'NR==1{ print $2; }')"
                printf "%s %s main NULL\n" "$commit" "$mod" >>../mod.index.txt
            )
        done
        x rmrf mod.index.txt
        mv ../mod.index.txt mod.index.txt
        git add .
        git commit -m ...
        git push "git@${GIT_DOMAIN}:x-cmd/y${no}.git" main
    )
}

function main(){
    prepare_gitb
    for i in "$@"; do
        work "$i" || exit 1
    done
}

if [ $# -eq 0 ]; then
    set -- 0 1 6 7
fi

main "$@"
