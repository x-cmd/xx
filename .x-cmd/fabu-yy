
set -o

x log init yy

GIT_DOMAIN=${GIT_DOMAIN:-$(x websrc gitdomain)}

git clone "git@${GIT_DOMAIN}:x-cmd/y0"

function prepare_gitb(){
    x yanfa vstream x0 | while read -r repo; do
        printf "%s\n" "git@${GIT_DOMAIN}:x-bash/${repo}.git"
    done | x gitb add
}

function handle_if_repo_empty(){
    local no="$1"
    yy:info "正在初始化${PWD}目录"
    git checkout -b main
    touch .gitignore
    git add .gitignore
    git commit -m ...
    x mkdirp mod
    x rmrf "x$no"
    [ -f LICENSE ] || {
        printf "%s\n" '本项目所有权限为李均豪(Li Junhao, l@x-cmd.com)所有，保留所有权利。
本项目仅由李均豪访问，如果你意外获得本仓库数据，请马上删除。' > LICENSE
    }
    [ -f X ] || {
        printf "%s\n" '. "${___X_CMD_ROOT_CODE:-"$___X_CMD_ROOT/v/$___X_CMD_VERSION"}/mod/xrc/latest"' > X
    }

}


function work(){
    local no=$1
    x git clone "git@${GIT_DOMAIN}:x-cmd/y${no}.git"
    (
        cd "y${no}" || return
        handle_if_repo_empty "$no"

        x gitb which x-bash/x-cmd

        x:info "INPUTS_UPDATE_MOD_LIST[$INPUTS_UPDATE_MOD_LIST]"
        {
            if [ -z "$INPUTS_UPDATE_MOD_LIST" ]; then
                x yanfa vstream "x$no"
            else
                printf "%s\n" "$INPUTS_UPDATE_MOD_LIST" | sed 's/ /\n/g'
            fi
        } | sort | while read -r mod; do
            [ -n "$mod" ] || continue
            (
                yy:info "以subtree模式更新模块 $mod"
                gibpath="$(x gitb which x-bash/${mod})"
                yy:info "gitb路径 $gibpath"
                if [ -d "mod/$mod" ]; then
                    git subtree pull  --prefix="mod/$mod" --squash "$gibpath" main
                else
                    git subtree add   --prefix="mod/$mod" --squash "$gibpath" main
                fi
            )
        done


        x yanfa vstream "x$no" | sort | while read -r mod; do
            [ -n "$mod" ] || continue
            (
                yy:info "以subtree模式更新模块 $mod"
                gibpath="$(x gitb which x-bash/${mod})"
                commit="$(cd "$gibpath"; git log -n 1 main | awk 'NR==1{ print $2; }')"
                printf "%s %s main NULL\n" "$commit" "$mod" >>../mod.index.txt
            )
        done

        x rmrf mod.index.txt .x-cmd/metadata
        mkdir -p .x-cmd/metadata
        mv ../mod.index.txt .x-cmd/metadata/mod.index.txt
        git add .
        git commit -m ...
        git push "git@${GIT_DOMAIN}:x-cmd/y${no}.git" main
    )
}

function main(){
    prepare_gitb
    for i in "$@"; do
        work "$i" || exit 1
    done
}

[ -z "$INPUTS_VERSION_NUM" ] || set -- "$INPUTS_VERSION_NUM"

if [ $# -eq 0 ]; then
    set -- 0 1 6
fi

main "$@"
